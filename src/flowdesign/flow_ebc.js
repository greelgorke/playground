// Generated by CoffeeScript 1.3.3

/*
generals
*/


(function() {
  var BruttoRechner, EventEmitter, MwStRechener, NettoAccumulator, Rechner, UI, l,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  l = function(a) {
    return console.log(a);
  };

  UI = (function(_super) {

    __extends(UI, _super);

    function UI() {
      var IN, OUT, readNumber, userinputEvent;
      IN = process.stdin;
      IN.resume();
      IN.setEncoding('utf8');
      OUT = process.stdout;
      this.userinputEvent = userinputEvent = 'user input available';
      this.write = function(output) {
        return OUT.write('Brutto: ' + output + '\n');
      };
      readNumber = function(chunk) {
        var theNumber;
        if (chunk == null) {
          chunk = 0;
        }
        l('read' + chunk);
        theNumber = parseFloat(chunk);
        if (isFinite(theNumber || isNaN(theNumber))) {
          l('emiting');
          return this.emit(userinputEvent, theNumber);
        } else {
          l('error');
          return this.emit('error');
        }
      };
      IN.on('data', readNumber);
    }

    return UI;

  })(EventEmitter);

  NettoAccumulator = (function(_super) {

    __extends(NettoAccumulator, _super);

    function NettoAccumulator() {
      var netto, nettoEvent;
      netto = 0;
      this.nettoEvent = nettoEvent = 'netto ready';
      this.inputNewNetto = function(newNetto) {
        l('netto' + newNetto);
        netto += newNetto;
        return nettoEvent.emit(nettoEvent, netto);
      };
    }

    return NettoAccumulator;

  })(EventEmitter);

  MwStRechener = (function(_super) {

    __extends(MwStRechener, _super);

    function MwStRechener(steuersatz) {
      var mwstSatzEvent, theSteuersatz;
      if (steuersatz == null) {
        steuersatz = 0.19;
      }
      theSteuersatz = steuersatz;
      this.mwstSatzEvent = mwstSatzEvent = 'MwStSatz ready';
      this.inputNetto = function(netto) {
        var steuer;
        l('mwst' + netto);
        steuer = netto * theSteuersatz;
        return mwstSatzEvent.emit(mwstSatzEvent, steuer);
      };
    }

    return MwStRechener;

  })(EventEmitter);

  BruttoRechner = (function(_super) {

    __extends(BruttoRechner, _super);

    function BruttoRechner() {
      var bruttoEvent, mwst, netto, process;
      netto = null;
      mwst = null;
      this.bruttoEvent = bruttoEvent = 'brutto ready';
      this.inputNetto = function(newnetto) {
        netto = newnetto;
        return process();
      };
      this.inputSteuer = function(steuer) {
        mwst = steuer;
        return process();
      };
      process = function() {
        var brutto;
        l('process');
        if (netto !== null && mwst !== null) {
          brutto = netto + mwst;
          netto = null;
          mwst = null;
          return bruttoEvent.emit(bruttoEvent, brutto);
        }
      };
    }

    return BruttoRechner;

  })(EventEmitter);

  /*Platine
  */


  Rechner = (function() {

    function Rechner() {
      var bruttoRechner, mwstRechner, nettoAccu, ui;
      nettoAccu = new NettoAccumulator();
      mwstRechner = new MwStRechener();
      bruttoRechner = new BruttoRechner();
      ui = new UI();
      ui.on(ui.userinputEvent, nettoAccu.inputNewNetto);
      nettoAccu.on(nettoAccu.nettoEvent, mwstRechner.inputNetto);
      nettoAccu.on(nettoAccu.nettoEvent, bruttoRechner.inputNetto);
      mwstRechner.on(mwstRechner.mwstSatzEvent, bruttoRechner.inputSteuer);
      bruttoRechner.on(bruttoRechner.bruttoEvent, ui.write);
      ui.on('error', ui.write);
    }

    return Rechner;

  })();

  new Rechner();

  console.log('running.... quit with cmd+c');

}).call(this);
